/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root';
import { Route as PublicLayoutImport } from './routes/_public/layout';
import { Route as ProtectedLayoutImport } from './routes/_protected/layout';
import { Route as PublicIndexImport } from './routes/_public/index';
import { Route as ProtectedSampleImport } from './routes/_protected/sample';

// Create/Update Routes

const PublicLayoutRoute = PublicLayoutImport.update({
  id: '/_public',
  getParentRoute: () => rootRoute,
} as any);

const ProtectedLayoutRoute = ProtectedLayoutImport.update({
  id: '/_protected',
  getParentRoute: () => rootRoute,
} as any);

const PublicIndexRoute = PublicIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PublicLayoutRoute,
} as any);

const ProtectedSampleRoute = ProtectedSampleImport.update({
  id: '/sample',
  path: '/sample',
  getParentRoute: () => ProtectedLayoutRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_protected': {
      id: '/_protected';
      path: '';
      fullPath: '';
      preLoaderRoute: typeof ProtectedLayoutImport;
      parentRoute: typeof rootRoute;
    };
    '/_public': {
      id: '/_public';
      path: '';
      fullPath: '';
      preLoaderRoute: typeof PublicLayoutImport;
      parentRoute: typeof rootRoute;
    };
    '/_protected/sample': {
      id: '/_protected/sample';
      path: '/sample';
      fullPath: '/sample';
      preLoaderRoute: typeof ProtectedSampleImport;
      parentRoute: typeof ProtectedLayoutImport;
    };
    '/_public/': {
      id: '/_public/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof PublicIndexImport;
      parentRoute: typeof PublicLayoutImport;
    };
  }
}

// Create and export the route tree

interface ProtectedLayoutRouteChildren {
  ProtectedSampleRoute: typeof ProtectedSampleRoute;
}

const ProtectedLayoutRouteChildren: ProtectedLayoutRouteChildren = {
  ProtectedSampleRoute: ProtectedSampleRoute,
};

const ProtectedLayoutRouteWithChildren = ProtectedLayoutRoute._addFileChildren(
  ProtectedLayoutRouteChildren
);

interface PublicLayoutRouteChildren {
  PublicIndexRoute: typeof PublicIndexRoute;
}

const PublicLayoutRouteChildren: PublicLayoutRouteChildren = {
  PublicIndexRoute: PublicIndexRoute,
};

const PublicLayoutRouteWithChildren = PublicLayoutRoute._addFileChildren(PublicLayoutRouteChildren);

export interface FileRoutesByFullPath {
  '': typeof PublicLayoutRouteWithChildren;
  '/sample': typeof ProtectedSampleRoute;
  '/': typeof PublicIndexRoute;
}

export interface FileRoutesByTo {
  '': typeof ProtectedLayoutRouteWithChildren;
  '/sample': typeof ProtectedSampleRoute;
  '/': typeof PublicIndexRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  '/_protected': typeof ProtectedLayoutRouteWithChildren;
  '/_public': typeof PublicLayoutRouteWithChildren;
  '/_protected/sample': typeof ProtectedSampleRoute;
  '/_public/': typeof PublicIndexRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: '' | '/sample' | '/';
  fileRoutesByTo: FileRoutesByTo;
  to: '' | '/sample' | '/';
  id: '__root__' | '/_protected' | '/_public' | '/_protected/sample' | '/_public/';
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  ProtectedLayoutRoute: typeof ProtectedLayoutRouteWithChildren;
  PublicLayoutRoute: typeof PublicLayoutRouteWithChildren;
}

const rootRouteChildren: RootRouteChildren = {
  ProtectedLayoutRoute: ProtectedLayoutRouteWithChildren,
  PublicLayoutRoute: PublicLayoutRouteWithChildren,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_protected",
        "/_public"
      ]
    },
    "/_protected": {
      "filePath": "_protected/layout.tsx",
      "children": [
        "/_protected/sample"
      ]
    },
    "/_public": {
      "filePath": "_public/layout.tsx",
      "children": [
        "/_public/"
      ]
    },
    "/_protected/sample": {
      "filePath": "_protected/sample.tsx",
      "parent": "/_protected"
    },
    "/_public/": {
      "filePath": "_public/index.tsx",
      "parent": "/_public"
    }
  }
}
ROUTE_MANIFEST_END */
